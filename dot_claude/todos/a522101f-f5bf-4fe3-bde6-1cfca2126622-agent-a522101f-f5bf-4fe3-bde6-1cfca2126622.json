[
  {
    "content": "List HTML files in the html directory",
    "status": "completed",
    "priority": "high",
    "id": "1"
  },
  {
    "content": "Read HTML files to extract original site URLs",
    "status": "completed",
    "priority": "high",
    "id": "2"
  },
  {
    "content": "Access original sites with Playwright MCP to analyze structure",
    "status": "completed",
    "priority": "high",
    "id": "3"
  },
  {
    "content": "Discuss movie information extraction format with user",
    "status": "completed",
    "priority": "medium",
    "id": "4"
  },
  {
    "content": "Create abstract base scraper class",
    "status": "completed",
    "priority": "high",
    "id": "5"
  },
  {
    "content": "Implement theater-specific scraper classes",
    "status": "completed",
    "priority": "high",
    "id": "6"
  },
  {
    "content": "Create data models for movie/theater information",
    "status": "completed",
    "priority": "high",
    "id": "7"
  },
  {
    "content": "Implement main scraping orchestrator",
    "status": "completed",
    "priority": "high",
    "id": "8"
  },
  {
    "content": "Analyze Discord bot notification requirements",
    "status": "completed",
    "priority": "high",
    "id": "9"
  },
  {
    "content": "Design Discord notification formats",
    "status": "completed",
    "priority": "high",
    "id": "10"
  },
  {
    "content": "Implement weekly schedule Discord notification",
    "status": "completed",
    "priority": "high",
    "id": "11"
  },
  {
    "content": "Create interactive Discord bot with Playwright integration",
    "status": "completed",
    "priority": "high",
    "id": "12"
  },
  {
    "content": "Implement movie search and query functionality",
    "status": "completed",
    "priority": "high",
    "id": "13"
  }
]